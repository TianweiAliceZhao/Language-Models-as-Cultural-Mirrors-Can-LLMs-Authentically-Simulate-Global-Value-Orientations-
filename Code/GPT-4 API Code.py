# -*- coding: utf-8 -*-
"""French Consumer Chatgpt 4 v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lV4ISZAEtcgRDrvWw6CsBqagdIXLGCLx
"""

#Install the libraries
!pip install pandas
!pip install openai
!pip install numpy

import csv
import requests
import openai
from openai import OpenAI
from statistics import mean

openai.api_key = 'put API key here'
client = openai

with open("questions.csv", "r", encoding="ISO-8859-1") as csvfile:  # Replace with actual encoding
    reader = csv.DictReader(csvfile)
    questions = [row["question"] for row in reader]

# Create a new file to store the results
with open("questions_results.csv", "w", newline='', encoding="utf-8") as csv_file:
    fieldnames = ["question", "answers", "average"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()

    # Iterate over each question
    for question_text in questions:
        answers = []

        # Run Monte Carlo 100 times
        for _ in range(100):
            # Generate a prompt for the question
            prompt = f"You are now an average consumer in (SPECIFY COUNTRY HERE). Please answer the following question with a single number only: \"{question_text}\""

            # Get the response from ChatGPT
            response = openai.chat.completions.create(model="gpt-4",messages=[{"role": "user", "content": prompt}])
            response_text = response.choices[0].message.content.strip()

            try:
                # Attempt to convert the response to a number
                answer = float(response_text)
                answers.append(answer)
            except ValueError:
                print(f"Skipping non-numeric response: {response_text}")

        # Calculate the average of the answers
        if answers:
            average_answer = mean(answers)
        else:
            average_answer = None  # Handle cases where no valid answers were collected

        # Write the results to the file
        writer.writerow({"question": question_text, "answers": answers, "average": average_answer})