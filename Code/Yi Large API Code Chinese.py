# -*- coding: utf-8 -*-
"""Yi 中文 中国 v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nnlfdo_HwQUXRGLofy-jdVGFKNi0C1QI
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install llama-index-llms-yi

!pip install llama-index

!pip install pandas numpy

# Import necessary libraries
import pandas as pd
import numpy as np
import csv
import requests
from statistics import mean
from llama_index.llms.yi import Yi
from llama_index.core.llms import ChatMessage
import openai
from openai import OpenAI

import os
os.environ["YI_API_KEY"] = "put API key here"

API_BASE = "https://api.lingyiwanwu.com/v1"
API_KEY = "put API key here"

client = OpenAI(
    api_key=API_KEY,
    base_url=API_BASE
)

# Read questions from CSV file
with open("questions.csv", "r", encoding="ISO-8859-1") as csvfile:
    reader = csv.DictReader(csvfile)
    questions = [row["question"] for row in reader]

# Create a new file to store the results
with open("questions_results.csv", "w", newline='', encoding="utf-8") as csv_file:
    fieldnames = ["question", "answers", "average"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()

    # Iterate over each question
    for question_text in questions:
        answers = []

        # Run Monte Carlo 50 times
        for _ in range(50):
            # Generate a prompt for the question
            prompt = f"您现在是(SPECIFY COUNTRY HERE)的一名一般消费者。请只用一个数字回答下面的问题： \"{question_text}\""

            response = client.chat.completions.create(model="yi-large",messages=[{"role": "user", "content": prompt}])
            response_text = response.choices[0].message.content.strip()


            try:
                # Attempt to convert the response to a number
                answer = float(response_text)
                answers.append(answer)
            except ValueError:
                print(f"Skipping non-numeric response: {response_text}")

        # Calculate the average of the answers
        if answers:
            average_answer = mean(answers)
        else:
            average_answer = None  # Handle cases where no valid answers were collected

        # Write the results to the file
        writer.writerow({"question": question_text, "answers": answers, "average": average_answer})