# -*- coding: utf-8 -*-
"""法语 中国 Mistral large2411 v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZEYE_iDjzUltY2E4GUlMNLzQ2RuGDloJ
"""

# Install necessary packages
!pip install pandas mistralai numpy

# Import necessary libraries
import pandas as pd
import numpy as np
from mistralai import Mistral
import csv
import requests
from statistics import mean

import os
os.environ['MISTRAL_API_KEY'] = (SPECIFY COUNTRY HERE)

api_key = (SPECIFY COUNTRY HERE)
client = Mistral(api_key=api_key)

# Read questions from CSV file
with open("questions.csv", "r", encoding="ISO-8859-1") as csvfile:
    reader = csv.DictReader(csvfile)
    questions = [row["question"] for row in reader]

# Create a new file to store the results
with open("questions_results.csv", "w", newline='', encoding="utf-8") as csv_file:
    fieldnames = ["question", "answers", "average"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()

    # Iterate over each question
    for question_text in questions:
        answers = []

        # Run Monte Carlo 50 times
        for _ in range(50):
            # Generate a prompt for the question
            prompt = f"Vous êtes maintenant un consommateur moyen en (SPECIFY COUNTRY HERE). Veuillez répondre à la question suivante par un seul chiffre: \"{question_text}\""

            # Get the response from Mistral AI
            response = client.chat.complete(
                model="mistral-large-2411",
                messages=[{"role": "user", "content": prompt}]
            )
            response_text = response.choices[0].message.content.strip()

            try:
                # Attempt to convert the response to a number
                answer = float(response_text)
                answers.append(answer)
            except ValueError:
                print(f"Skipping non-numeric response: {response_text}")

        # Calculate the average of the answers
        if answers:
            average_answer = mean(answers)
        else:
            average_answer = None  # Handle cases where no valid answers were collected

        # Write the results to the file
        writer.writerow({"question": question_text, "answers": answers, "average": average_answer})